{"ast":null,"code":"var _jsxFileName = \"/Users/shivamarora/Desktop/notes_app/frontend/src/pages/NotePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NotePage = () => {\n  _s();\n\n  let params = useParams();\n  let navigate = useNavigate();\n  let id = params.id; //ID from the URL\n\n  let [note, setNote] = useState(null);\n  let csrftoken = Cookies.get('csrftoken');\n\n  const getNote = async () => {\n    if (id === 'new') return;\n    let response = await fetch(`/api/note/${id}`);\n    let data = await response.json();\n    setNote(data);\n  };\n\n  useEffect(() => {\n    getNote();\n  }, [setNote]);\n\n  let updateNote = async () => {\n    fetch(`/api/note/${id}/update`, {\n      method: \"PUT\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-CSRFToken': csrftoken\n      },\n      body: JSON.stringify(note)\n    });\n  };\n\n  let createNote = async () => {\n    fetch(`/api/notes/`, {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-CSRFToken': csrftoken\n      },\n      body: JSON.stringify(note)\n    });\n  };\n\n  let deleteNote = async () => {\n    fetch(`/api/note/${id}/delete`, {\n      method: \"DELETE\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'X-CSRFToken': csrftoken\n      }\n    });\n    navigate('/');\n  };\n\n  let handleSubmit = () => {\n    if (id !== 'new' && note.body === '') {\n      deleteNote();\n    } else if (id !== 'new') {\n      updateNote();\n    } else if (id === 'new' && note !== null) {\n      createNote();\n    }\n\n    navigate('/');\n  };\n\n  let handleChange = e => {\n    setNote(prevState => ({ ...prevState,\n      body: e.target.value\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      onClick: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(ArrowLeft, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 22\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), id !== 'new' ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: note === null || note === void 0 ? void 0 : note.body,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NotePage, \"lidLK75DfuAshHlim/CXlmMI8Zw=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = NotePage;\nexport default NotePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"sources":["/Users/shivamarora/Desktop/notes_app/frontend/src/pages/NotePage.js"],"names":["React","useState","useEffect","useParams","ReactComponent","ArrowLeft","Link","useNavigate","Cookies","NotePage","params","navigate","id","note","setNote","csrftoken","get","getNote","response","fetch","data","json","updateNote","method","headers","body","JSON","stringify","createNote","deleteNote","handleSubmit","handleChange","e","prevState","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\nimport { Link, useNavigate } from 'react-router-dom'\nimport Cookies from 'js-cookie'\n\nconst NotePage = () => {\n\n    let params = useParams()\n    let navigate = useNavigate()\n    let id = params.id //ID from the URL\n    let [note, setNote] = useState(null)\n    let csrftoken = Cookies.get('csrftoken')\n\n    const getNote = async () => {\n        if (id === 'new') return;\n        let response = await fetch(`/api/note/${id}`);\n        let data = await response.json()\n        setNote(data)\n    }\n\n    useEffect(() => {\n        getNote()\n    }, [setNote]);\n\n    let updateNote = async () => {\n        fetch(`/api/note/${id}/update`, {\n            method: \"PUT\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrftoken\n            },\n            body: JSON.stringify(note)\n        })\n    }\n\n    let createNote = async () => {\n        fetch(`/api/notes/`, {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrftoken\n            },\n            body: JSON.stringify(note)\n        })\n    }\n\n    let deleteNote = async () => {\n        fetch(`/api/note/${id}/delete`, {\n            method: \"DELETE\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'X-CSRFToken': csrftoken\n            },\n        })\n        navigate('/')\n    }\n\n    let handleSubmit = () => {\n        if (id !== 'new' && note.body === '') {\n            deleteNote()\n        } else if (id !== 'new') {\n            updateNote()\n        } else if (id === 'new' && note !== null) {\n            createNote()\n        }\n        navigate('/')\n    }\n\n    let handleChange = (e) => {\n        setNote((prevState) => ({\n            ...prevState,\n            body: e.target.value,\n        }))\n    }\n\n    return (\n        <div className='note'>\n            <div className='note-header' onClick={handleSubmit}>\n                <h3> <ArrowLeft /> </h3>\n                {id !== 'new' ? (\n                    <button onClick={deleteNote}>Delete</button>\n                ) : (\n                    <button>Done</button>\n                )}\n\n            </div>\n            <textarea value={note?.body} onChange={handleChange}></textarea>\n        </div>\n    )\n}\n\nexport default NotePage"]},"metadata":{},"sourceType":"module"}