{"ast":null,"code":"import _objectSpread from\"/Users/shivamarora/Desktop/notes_app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/Users/shivamarora/Desktop/notes_app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/shivamarora/Desktop/notes_app/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/shivamarora/Desktop/notes_app/frontend/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState,useEffect}from'react';import{useParams}from'react-router-dom';import{ReactComponent as ArrowLeft}from'../assets/arrow-left.svg';import{Link,useNavigate}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var NotePage=function NotePage(){var params=useParams();var navigate=useNavigate();var id=params.id;//ID from the URL\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),note=_useState2[0],setNote=_useState2[1];var getNote=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(id==='new')){_context.next=2;break;}return _context.abrupt(\"return\");case 2:_context.next=4;return fetch(\"/api/note/\".concat(id));case 4:response=_context.sent;_context.next=7;return response.json();case 7:data=_context.sent;setNote(data);case 9:case\"end\":return _context.stop();}}},_callee);}));return function getNote(){return _ref.apply(this,arguments);};}();useEffect(function(){getNote();},[setNote]);var updateNote=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:fetch(\"/api/note/\".concat(id,\"/update\"),{method:\"PUT\",headers:{'Content-Type':'application/json'},body:JSON.stringify(note)});case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function updateNote(){return _ref2.apply(this,arguments);};}();var createNote=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:fetch(\"/api/notes/create\",{method:\"POST\",headers:{'Content-Type':'application/json'},body:JSON.stringify(note)});case 1:case\"end\":return _context3.stop();}}},_callee3);}));return function createNote(){return _ref3.apply(this,arguments);};}();var deleteNote=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:fetch(\"/api/note/\".concat(id,\"/delete\"),{method:\"DELETE\",headers:{'Content-Type':'application/json'}});navigate('/');case 2:case\"end\":return _context4.stop();}}},_callee4);}));return function deleteNote(){return _ref4.apply(this,arguments);};}();var handleSubmit=function handleSubmit(){if(id!=='new'&&note.body===''){deleteNote();}else if(id!=='new'){updateNote();}else if(id==='new'&&note!==null){createNote();}navigate('/');};var handleChange=function handleChange(e){setNote(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{body:e.target.value});});};return/*#__PURE__*/_jsxs(\"div\",{className:\"note\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"note-header\",onClick:handleSubmit,children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\" \",/*#__PURE__*/_jsx(ArrowLeft,{}),\" \"]}),id!=='new'?/*#__PURE__*/_jsx(\"button\",{onClick:deleteNote,children:\"Delete\"}):/*#__PURE__*/_jsx(\"button\",{children:\"Done\"})]}),/*#__PURE__*/_jsx(\"textarea\",{value:note===null||note===void 0?void 0:note.body,onChange:handleChange})]});};export default NotePage;","map":{"version":3,"sources":["/Users/shivamarora/Desktop/notes_app/frontend/src/pages/NotePage.js"],"names":["React","useState","useEffect","useParams","ReactComponent","ArrowLeft","Link","useNavigate","NotePage","params","navigate","id","note","setNote","getNote","fetch","response","json","data","updateNote","method","headers","body","JSON","stringify","createNote","deleteNote","handleSubmit","handleChange","e","prevState","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\nimport { Link, useNavigate } from 'react-router-dom'\n\nconst NotePage = () => {\n\n    let params = useParams()\n    let navigate = useNavigate()\n    let id = params.id //ID from the URL\n    let [note, setNote] = useState(null)\n\n    const getNote = async () => {\n        if (id === 'new') return;\n        let response = await fetch(`/api/note/${id}`);\n        let data = await response.json()\n        setNote(data)\n    }\n\n    useEffect(() => {\n        getNote()\n    }, [setNote]);\n\n    let updateNote = async () => {\n        fetch(`/api/note/${id}/update`, {\n            method: \"PUT\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(note)\n        })\n    }\n\n    let createNote = async () => {\n        fetch(`/api/notes/create`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(note)\n        })\n    }\n\n    let deleteNote = async () => {\n        fetch(`/api/note/${id}/delete`, {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        navigate('/')\n    }\n\n    let handleSubmit = () => {\n        if (id !== 'new' && note.body === '') {\n            deleteNote()\n        } else if (id !== 'new') {\n            updateNote()\n        } else if (id === 'new' && note !== null) {\n            createNote()\n        }\n        navigate('/')\n    }\n\n    let handleChange = (e) => {\n        setNote((prevState) => ({\n            ...prevState,\n            body: e.target.value,\n        }))\n    }\n\n    return (\n        <div className='note'>\n            <div className='note-header' onClick={handleSubmit}>\n                <h3> <ArrowLeft /> </h3>\n                {id !== 'new' ? (\n                    <button onClick={deleteNote}>Delete</button>\n                ) : (\n                    <button>Done</button>\n                )}\n\n            </div>\n            <textarea value={note?.body} onChange={handleChange}></textarea>\n        </div>\n    )\n}\n\nexport default NotePage"]},"metadata":{},"sourceType":"module"}